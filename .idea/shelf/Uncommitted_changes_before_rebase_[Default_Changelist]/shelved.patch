Index: commands/action/lick.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst axios = require('axios');\r\nconst { errorMessage } = require('../../util/logHandler');\r\nconst ErrorEnum = require('../../util/errorTypes.json');\r\nconst { disgustP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class LickCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'lick',\r\n\t\t\taliases: ['slurp'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'lick',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Licks the user you mentioned!',\r\n\t\t\texamples: ['~lick <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tasync run(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tconst disgust = disgustP[Math.round(Math.random() * (disgustP.length - 1))];\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(disgust);\r\n\t\t\treturn message.channel.send(`${message.author} licks... themselves..?`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == message.author) {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(disgust);\r\n\t\t\treturn message.channel.send(`${message.author} licks... themselves..?`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\r\n\r\n\t\t\tawait axios.get('https://rra.ram.moe/i/r?type=lick')\r\n\t\t\t\t.then(function(res) {\r\n\t\t\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t\t\t.setImage(`https://rra.ram.moe${res.data.path}`);\r\n\t\t\t\t\treturn message.channel.send('Nyaa..♡(｡￫ˇ艸￩) where are you...licking me...', { embed: embed });\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(error) {\r\n\t\t\t\t\t// handle error\r\n\r\n\t\t\t\t\tmessage.client.channels.cache.get(message.client.errorLog).send({ embed: errorMessage(error, ErrorEnum.API, message.command.name) });\r\n\r\n\t\t\t\t});\r\n\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\r\n\t\t\tawait axios.get('https://rra.ram.moe/i/r?type=lick')\r\n\t\t\t\t.then(function(res) {\r\n\t\t\t\t\tconst embed2 = new Discord.MessageEmbed()\r\n\t\t\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t\t\t.setImage(`https://rra.ram.moe${res.body.path}`);\r\n\t\t\t\t\treturn message.channel.send(`${message.author} licks ${recipient}!`, { embed: embed2 });\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(error) {\r\n\t\t\t\t\t// handle error\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/lick.js b/commands/action/lick.js
--- a/commands/action/lick.js	
+++ b/commands/action/lick.js	
@@ -14,11 +14,7 @@
 			memberName: 'lick',
 			guildOnly: true,
 			description: 'Licks the user you mentioned!',
-			examples: ['~lick <user>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!lick <user>'],
 		});
 	}
 
Index: commands/action/pat.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { patP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class PatCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'pat',\r\n\t\t\taliases: ['pet'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'pat',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Pats the user you mentioned on the head!',\r\n\t\t\texamples: ['~pat <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tconst pat = patP[Math.round(Math.random() * (patP.length - 1))];\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(pat);\r\n\t\t\treturn message.channel.send(`${message.author}, you can't pat yourself, but I'll pat you! (´꒳\\`)`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == message.author) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(pat);\r\n\t\t\treturn message.channel.send(`${message.author}, you can't pat yourself, but I'll pat you! (´꒳\\`)`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(pat);\r\n\t\t\treturn message.channel.send('H-Haa.. (✿´ ꒳ ` ) please don\\'t stop...', { embed: embed });\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(pat);\r\n\t\t\treturn message.channel.send(`${message.author} pats ${recipient}!`, { embed: embed });\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/pat.js b/commands/action/pat.js
--- a/commands/action/pat.js	
+++ b/commands/action/pat.js	
@@ -11,7 +11,7 @@
 			memberName: 'pat',
 			guildOnly: true,
 			description: 'Pats the user you mentioned on the head!',
-			examples: ['~pat <user>'],
+			examples: ['!pat <user>'],
 			throttling: {
 				usages: 1,
 				duration: 3,
Index: commands/action/noswearing.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { noSwearP } = require('../../assets/json/actions.json');\r\n\r\n\r\nmodule.exports = class PoutCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'noswearing',\r\n\t\t\taliases: ['sorrysir', 'noswear'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'noswearing',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Sorry sir no swearing in my Christian Minecraft server',\r\n\t\t\texamples: ['~wink <mention>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tconst noSwear = noSwearP[Math.round(Math.random() * (noSwearP.length - 1))];\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(noSwear);\r\n\t\t\treturn message.channel.send('**NO SWEARING! <:NOSWEARING:379103012007706624>**', { embed: embed });\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(noSwear);\r\n\t\t\treturn message.channel.send(`${recipient}, NO SWEARING!`, { embed: embed });\r\n\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/noswearing.js b/commands/action/noswearing.js
--- a/commands/action/noswearing.js	
+++ b/commands/action/noswearing.js	
@@ -12,11 +12,7 @@
 			memberName: 'noswearing',
 			guildOnly: true,
 			description: 'Sorry sir no swearing in my Christian Minecraft server',
-			examples: ['~wink <mention>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!wink <mention>'],
 		});
 	}
 
Index: commands/action/owo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst axios = require('axios').default;\r\nconst { errorMessage } = require('../../util/logHandler');\r\nconst ErrorEnum = require('../../util/errorTypes.json');\r\n\r\nmodule.exports = class OwoCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'owo',\r\n\t\t\taliases: ['whatsthis'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'owo',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'OWO what\\'s this!',\r\n\t\t\texamples: ['~owo'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tasync run(message) {\r\n\r\n\t\tawait axios.get('https://rra.ram.moe/i/r?type=owo')\r\n\t\t\t.then(function(res) {\r\n\r\n\t\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t\t.setImage(`https://rra.ram.moe${res.data.path}`);\r\n\t\t\t\treturn message.channel.send({ embed });\r\n\t\t\t})\r\n\t\t\t.catch(function(err) {\r\n\t\t\t\tmessage.client.channel.cache.get(message.client.errorLog).send({ embed: errorMessage(err, ErrorEnum.API, message.command.name) });\r\n\t\t\t});\r\n\r\n\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/owo.js b/commands/action/owo.js
--- a/commands/action/owo.js	
+++ b/commands/action/owo.js	
@@ -13,11 +13,7 @@
 			memberName: 'owo',
 			guildOnly: true,
 			description: 'OWO what\'s this!',
-			examples: ['~owo'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!owo'],
 		});
 	}
 
Index: commands/action/hug.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { hugP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class HugCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'hug',\r\n\t\t\taliases: ['cuddle'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'hug',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Hugs the user you mentioned!',\r\n\t\t\texamples: ['~hug <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tconst hug = hugP[Math.round(Math.random() * (hugP.length - 1))];\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hug);\r\n\t\t\treturn message.channel.send(`You can't hug yourself, but I'll hug you, ${message.author}!`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == message.author) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hug);\r\n\t\t\treturn message.channel.send(`You can't hug yourself, but I'll hug you, ${message.author}!`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hug);\r\n\t\t\treturn message.channel.send('ల(\\*´= ◡ =｀\\*) Such a warm hug..thank you~~ Nyaa~~', { embed: embed });\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hug);\r\n\t\t\treturn message.channel.send(`${message.author} hugs ${recipient}!`, { embed: embed });\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/hug.js b/commands/action/hug.js
--- a/commands/action/hug.js	
+++ b/commands/action/hug.js	
@@ -11,11 +11,7 @@
 			memberName: 'hug',
 			guildOnly: true,
 			description: 'Hugs the user you mentioned!',
-			examples: ['~hug <user>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!hug <user>'],
 		});
 	}
 
Index: commands/action/nobully.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst actions = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class NoBullyCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'nobully',\r\n\t\t\taliases: ['antibully'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'nobully',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Absolutely no bullying allowed!',\r\n\t\t\texamples: ['~nobully <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tif (!recipient) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(actions.nobullyP[Math.round(Math.random() * (actions.nobullyP.length - 1))]);\r\n\t\t\treturn message.channel.send({ embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\t\t\treturn message.channel.send('(✿´ ꒳ ` ) am not bulli!!');\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(actions.nobullyP[Math.round(Math.random() * (actions.nobullyP.length - 1))]);\r\n\t\t\treturn message.channel.send(`${recipient}, pls no bulli!!`, { embed: embed });\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/nobully.js b/commands/action/nobully.js
--- a/commands/action/nobully.js	
+++ b/commands/action/nobully.js	
@@ -11,11 +11,7 @@
 			memberName: 'nobully',
 			guildOnly: true,
 			description: 'Absolutely no bullying allowed!',
-			examples: ['~nobully <user>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!nobully <user>'],
 		});
 	}
 
Index: commands/action/hand.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { handP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class HandCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'hand',\r\n\t\t\taliases: ['handhold', 'holdhands'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'hand',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Holds hands with the user you mentioned!',\r\n\t\t\texamples: ['~hand <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tconst hand = handP[Math.round(Math.random() * (handP.length - 1))];\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hand);\r\n\t\t\treturn message.channel.send(`You can\\'t hold your own hand, but I'll hold your hand, ${message.author}!`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == message.author) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hand);\r\n\t\t\treturn message.channel.send(`You can\\'t hold your own hand, but I'll hold your hand, ${message.author}!`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hand);\r\n\t\t\treturn message.channel.send('K-Kya~~ I guess I\\'ll hold you hand, senpai! (〃・ω・〃)ノ', { embed: embed });\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(hand);\r\n\t\t\treturn message.channel.send(`${message.author} holds hands with ${recipient}!`, { embed: embed });\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/hand.js b/commands/action/hand.js
--- a/commands/action/hand.js	
+++ b/commands/action/hand.js	
@@ -11,11 +11,7 @@
 			memberName: 'hand',
 			guildOnly: true,
 			description: 'Holds hands with the user you mentioned!',
-			examples: ['~hand <user>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!hand <user>'],
 		});
 	}
 
Index: commands/action/nom.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst axios = require('axios');\r\nconst { disgustP } = require('../../assets/json/actions.json');\r\nconst { errorMessage } = require('../../util/logHandler');\r\nconst ErrorEnum = require('../../util/errorTypes.json');\r\n\r\nmodule.exports = class NomCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'nom',\r\n\t\t\taliases: ['eat', 'munch'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'nom',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Noms on the user you mentioned!',\r\n\t\t\texamples: ['~nom <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tasync run(message, args) {\r\n\t\tconst disgust = disgustP[Math.round(Math.random() * (disgustP.length - 1))];\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\r\n\t\tif (args.length < 1) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(disgust);\r\n\t\t\treturn message.channel.send(`${message.author} noms on... themselves..?`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == message.author) {\r\n\t\t\tconst embed2 = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(disgust);\r\n\t\t\treturn message.channel.send(`${message.author} noms on... themselves..?`, { embed: embed2 });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\r\n\r\n\t\t\tawait axios.get('https://rra.ram.moe/i/r?type=nom')\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t// handle success\r\n\t\t\t\t\tconst embed3 = new Discord.MessageEmbed()\r\n\t\t\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t\t\t.setImage(`https://rra.ram.moe${response.data.path}`);\r\n\t\t\t\t\treturn message.channel.send('Nyaa~ s-senpai... (´Å`∗)... ', { embed: embed3 });\r\n\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(error) {\r\n\t\t\t\t\tmessage.client.channels.cache.get(message.client.errorLog).send({ embed: errorMessage(error, ErrorEnum.API, message.command.name) });\r\n\t\t\t\t});\r\n\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\r\n\t\t\tawait axios.get('https://rra.ram.moe/i/r?type=nom')\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t// handle success\r\n\t\t\t\t\tconst embed4 = new Discord.MessageEmbed()\r\n\t\t\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t\t\t.setImage(`https://rra.ram.moe${response.data.path}`);\r\n\t\t\t\t\treturn message.channel.send(`${message.author} noms on ${recipient}!`, { embed: embed4 });\r\n\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(error) {\r\n\t\t\t\t\t// handle error\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/nom.js b/commands/action/nom.js
--- a/commands/action/nom.js	
+++ b/commands/action/nom.js	
@@ -14,11 +14,7 @@
 			memberName: 'nom',
 			guildOnly: true,
 			description: 'Noms on the user you mentioned!',
-			examples: ['~nom <user>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!nom <user>'],
 		});
 	}
 
Index: util/storage.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/util/storage.js b/util/storage.js
deleted file mode 100644
--- a/util/storage.js	
+++ /dev/null	
@@ -1,61 +0,0 @@
-const admin = require('firebase-admin');
-const logger = require('../util/logger');
-
-const storage = admin.storage().bucket();
-
-module.exports = class WeabooStorage {
-
-	async listFiles(collectionName) {
-		let result;
-		try {
-			const [files] = await storage.bucket(collectionName).getFiles();
-			result = files;
-			result.forEach(file => {
-				logger.info(`File Name: ${file.name}`);
-			});
-		}
-		catch (error) {
-			logger.error(`A Storage Error: ${error}`);
-			result = { success: false, error: error.message };
-		}
-		logger.info(`Status: ${result.success}`);
-	}
-
-	async uploadFile(collectionName) {
-		try {
-			await storage.upload(collectionName, {
-				destination: `./json/${collectionName}`,
-				metadata: {
-					cacheControl: 'public, max-age=31536000',
-				},
-			}).then(result => {
-				logger.debug(result);
-				logger.info(`Uploaded ${collectionName} to remote storage.`);
-			}).catch(error => {
-				logger.error(`A storage error occured: ${error}`);
-			});
-
-		}
-		catch(error) {
-			logger.error(`A storage error occured: ${error}`);
-		}
-	}
-
-	async deleteFile(collectionName) {
-		try {
-			await storage.file(collectionName).delete()
-				.then(result => {
-					logger.debug(result);
-					logger.info(`Uploaded ${collectionName} to remote storage.`);
-				}).catch(error => {
-					logger.error(`A storage error occured: ${error}`);
-				});
-
-		}
-		catch(error) {
-			logger.error(`A storage error occured: ${error}`);
-		}
-
-	}
-
-};
\ No newline at end of file
Index: commands/action/grope.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { disgustP, gropeP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class GropeCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'grope',\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'grope',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Gropes..? the user you mentioned...?',\r\n\t\t\texamples: ['~grope <user>'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 3,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst recipient = message.content.split(/\\s+/g).slice(1).join(' ');\r\n\t\tconst disgust = disgustP[Math.round(Math.random() * (disgustP.length - 1))];\r\n\t\tconst grope = gropeP[Math.round(Math.random() * (gropeP.length - 1))];\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(disgust);\r\n\t\t\treturn message.channel.send(`${message.author} gropes... themselves..?`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == message.author) {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(disgust);\r\n\t\t\treturn message.channel.send(`${message.author} gropes... themselves..?`, { embed: embed });\r\n\r\n\t\t}\r\n\t\telse if (message.mentions.users.first() == this.client.user) {\r\n\t\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(grope);\r\n\t\t\treturn message.channel.send('E-EH?! Nya! Where...are you.. touching.. (✿\\´ ꒳ ` ) I guess I\\'m okay with it as long as you are... Don\\'t take this the wrong way!', { embed: embed });\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar embed = new Discord.MessageEmbed()\r\n\t\t\t\t.setColor('#FBCFCF')\r\n\t\t\t\t.setImage(grope);\r\n\t\t\treturn message.channel.send(`${message.author} has started... groping ${recipient}?`, { embed: embed });\r\n\t\t}\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/grope.js b/commands/action/grope.js
--- a/commands/action/grope.js	
+++ b/commands/action/grope.js	
@@ -10,11 +10,7 @@
 			memberName: 'grope',
 			guildOnly: true,
 			description: 'Gropes..? the user you mentioned...?',
-			examples: ['~grope <user>'],
-			throttling: {
-				usages: 1,
-				duration: 3,
-			},
+			examples: ['!grope <user>'],
 		});
 	}
 
Index: commands/action/disgust.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { disgustP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class DisgustCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'disgust',\r\n\t\t\taliases: ['gross', 'eww'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'disgust',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'Absolutely **disgusting**, now which one of you likes handholding?',\r\n\t\t\texamples: ['~disgust'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 5,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t.setColor('#FBCFCF')\r\n\t\t\t.setImage(disgustP[Math.round(Math.random() * (disgustP.length - 1))]);\r\n\t\treturn message.channel.send({ embed });\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/disgust.js b/commands/action/disgust.js
--- a/commands/action/disgust.js	
+++ b/commands/action/disgust.js	
@@ -11,11 +11,7 @@
 			memberName: 'disgust',
 			guildOnly: true,
 			description: 'Absolutely **disgusting**, now which one of you likes handholding?',
-			examples: ['~disgust'],
-			throttling: {
-				usages: 1,
-				duration: 5,
-			},
+			examples: ['!disgust'],
 		});
 	}
 
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	
+++ b/.idea/vcs.xml	
@@ -1,5 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GithubSharedProjectSettings">
+    <option name="branchProtectionPatterns">
+      <list>
+        <option value="release" />
+      </list>
+    </option>
+  </component>
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
Index: commands/action/cry.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Command = require('../../structures/Command');\r\nconst Discord = require('discord.js');\r\nconst { cryP } = require('../../assets/json/actions.json');\r\n\r\nmodule.exports = class CryCommand extends Command {\r\n\tconstructor(client) {\r\n\t\tsuper(client, {\r\n\t\t\tname: 'cry',\r\n\t\t\taliases: ['sob', 'waa'],\r\n\t\t\tgroup: 'action',\r\n\t\t\tmemberName: 'cry',\r\n\t\t\tguildOnly: true,\r\n\t\t\tdescription: 'UWAA~',\r\n\t\t\texamples: ['~cry'],\r\n\t\t\tthrottling: {\r\n\t\t\t\tusages: 1,\r\n\t\t\t\tduration: 5,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trun(message) {\r\n\t\tconst embed = new Discord.MessageEmbed()\r\n\t\t\t.setColor('#FBCFCF')\r\n\t\t\t.setImage(cryP[Math.round(Math.random() * (cryP.length - 1))]);\r\n\t\treturn message.channel.send(`${message.author} has started crying!`, { embed: embed });\r\n\t}\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/commands/action/cry.js b/commands/action/cry.js
--- a/commands/action/cry.js	
+++ b/commands/action/cry.js	
@@ -11,11 +11,7 @@
 			memberName: 'cry',
 			guildOnly: true,
 			description: 'UWAA~',
-			examples: ['~cry'],
-			throttling: {
-				usages: 1,
-				duration: 5,
-			},
+			examples: ['!cry'],
 		});
 	}
 
