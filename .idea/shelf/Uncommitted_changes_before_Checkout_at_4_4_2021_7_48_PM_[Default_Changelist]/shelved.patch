Index: structures/Client.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const { CommandoClient } = require('discord.js-commando');\r\nconst Discord = require('discord.js');\r\nconst activities = require('../assets/json/activity');\r\nconst leaveMsgs = require('../assets/json/leave-messages');\r\nconst { readdir } = require('fs');\r\nconst { join, resolve } = require('path');\r\nconst { fail } = require('../assets/json/emojis.json');\r\n\r\nconst GROUPS = [\r\n    ['action', 'Action'],\r\n    ['anime', 'Anime'],\r\n    ['core', 'Core'],\r\n    ['fun', 'Fun'],\r\n    ['games-mp', 'Multi-Player Games'],\r\n    ['games-sp', 'Single-Player Games'],\r\n    ['info', 'Info'],\r\n    ['memes', 'Memes'],\r\n    ['moderation', 'Moderation'],\r\n    ['music', 'Music Commands'],\r\n    ['news', 'News'],\r\n    ['nsfw', 'NSFW'],\r\n    ['numbers', 'Number Commands'],\r\n    ['owner', 'Hidden + Owner'],\r\n    ['text', 'Text Commands'],\r\n    ['util', 'Utility'],\r\n    ['general', 'General'],\r\n    ['loyal', 'Loyalty Program Commands'],\r\n    ['other', 'Other'],\r\n];\r\n\r\nDiscord.Structures.extend('Guild', function (Guild) {\r\n    class MusicGuild extends Guild {\r\n        constructor(client, data) {\r\n            super(client, data);\r\n            this.musicData = {\r\n                queue: [],\r\n                isPlaying: false,\r\n                nowPlaying: null,\r\n                songDispatcher: null,\r\n                volume: 0.1,\r\n            };\r\n        }\r\n    }\r\n    return MusicGuild;\r\n});\r\n\r\nmodule.exports = class WeabooClient extends CommandoClient {\r\n    constructor(config, options = {}) {\r\n        super(options);\r\n\r\n        this.registry\r\n            .registerDefaultTypes()\r\n            .registerTypesIn(join(__dirname, '../types'))\r\n            .registerGroups(GROUPS)\r\n            .registerDefaultCommands({\r\n                help: false,\r\n                ping: false,\r\n                prefix: false,\r\n                eval: false,\r\n                commandState: false,\r\n                unknownCommand: false,\r\n            })\r\n            .registerCommandsIn(join(__dirname, '../commands'));\r\n\r\n        /**\r\n         * Create winston logger\r\n         */\r\n        this.logger = require('../util/logger');\r\n\r\n        this.on('commandError', (command, err) =>\r\n            this.logger.error(`[COMMAND:${command.name}]\\n${err.stack}`)\r\n        );\r\n\r\n        /**\r\n         * Discord API Stuff\r\n         * @type {string}\r\n         */\r\n        this.token = config.discord.DISCORD_TOKEN;\r\n        this.successEmoji = config.api.SUCCESS_EMOJI_ID;\r\n        this.commandPrefix = config.discord.DISCORD_PREFIX;\r\n\r\n        /**\r\n         * API keys\r\n         * @type {Object}\r\n         */\r\n        this.apiKeys = config.api;\r\n\r\n        /**\r\n         * Weaboo's owner ID\r\n         * @type {string}\r\n         */\r\n        this.ownerId = config.discord.DISCORD_OWNER_ID;\r\n\r\n        /**\r\n         * Weaboo's Log IDs\r\n         */\r\n        this.auditLog = config.logs.AUDIT_LOG;\r\n        this.dmLog = config.logs.DM_LOG;\r\n        this.errorLog = config.logs.ERROR_LOG;\r\n        this.statusLog = config.logs.STATUS_LOG;\r\n        this.supportLog = config.logs.SUPPORT_LOG;\r\n        this.joinLeaveLog = config.logs.JOIN_LEAVE_LOG;\r\n        this.webhookLog = config.logs.WEBHOOK_LOG;\r\n        this.modLog = config.logs.MOD_LOG;\r\n\r\n        /**\r\n         * Utility functions\r\n         * @type {Object}\r\n         */\r\n        this.utils = require('../util/Util');\r\n        this.database = require('../util/db');\r\n        this.errorTypes = require('../assets/json/errorTypes.json');\r\n        this.logger.info('Initializing...');\r\n        this.webhook = new Discord.WebhookClient(\r\n            config.discord.DISCORD_WEBHOOK_ID,\r\n            config.discord.DISCORD_WEBHOOK_TOKEN,\r\n            { disableMentions: 'everyone' }\r\n        );\r\n        /**\r\n         * Several Collections to hold data\r\n         * @type {module:\"discord.js\".Collection<K, V>}\r\n         */\r\n        this.games = new Discord.Collection();\r\n        this.leaderboards = new Discord.Collection();\r\n        this.animeList = new Discord.Collection();\r\n\r\n\r\n        this.activities = activities;\r\n        this.leaveMessages = leaveMsgs;\r\n    }\r\n\r\n    fetchReportChannel() {\r\n        if (!this.supportLog) return null;\r\n        return this.channels.fetch(this.supportLog);\r\n    }\r\n\r\n    fetchJoinLeaveChannel() {\r\n        if (!this.joinLeaveLog) return null;\r\n        return this.channels.fetch(this.joinLeaveLog);\r\n    }\r\n\r\n    fetchModChannel() {\r\n        if (!this.modLog) return null;\r\n        return this.channels.fetch(this.modLog);\r\n    }\r\n\r\n    fetchAuditChannel() {\r\n        if (!this.auditLog) return null;\r\n        return this.channels.fetch(this.auditLog);\r\n    }\r\n\r\n    /**\r\n     * Loads all available events\r\n     * @param {string} path\r\n     */\r\n    loadEvents(path) {\r\n        readdir(path, (err, files) => {\r\n            if (err) this.logger.error(err);\r\n            files = files.filter((f) => f.split('.').pop() === 'js');\r\n            if (files.length === 0) return this.logger.warn('No events found');\r\n            this.logger.info(`${files.length} event(s) found...`);\r\n            files.forEach((f) => {\r\n                const eventName = f.substring(0, f.indexOf('.'));\r\n                const event = require(resolve(__basedir, join(path, f)));\r\n                super.on(eventName, event.bind(null, this));\r\n                delete require.cache[\r\n                    require.resolve(resolve(__basedir, join(path, f)))\r\n                ]; // Clear cache\r\n                this.logger.info(`Loading event: ${eventName}`);\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Loads all available commands\r\n     */\r\n    loadGroups() {\r\n        this.logger.info('Loading groups...');\r\n        this.logger.info(`${this.registry.groups.size} groups(s) found...`);\r\n        this.registry.groups.forEach((group) => {\r\n            this.logger.info(`Loading group: ${group.name}`);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Loads all available commands\r\n     */\r\n    loadCommands() {\r\n        this.logger.info('Loading commands...');\r\n        this.logger.info(`${this.registry.commands.size} commands(s) found...`);\r\n        this.registry.commands.forEach((command) => {\r\n            this.logger.info(`Loading command: ${command.name}`);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if user is the bot owner\r\n     * @param {User} user\r\n     */\r\n    isOwner(user) {\r\n        if (user.id === this.ownerId) return true;\r\n        else return false;\r\n    }\r\n\r\n    /**\r\n     * Creates and sends system failure embed\r\n     * @param {Guild} guild\r\n     * @param {string} error\r\n     * @param {string} errorMessage\r\n     */\r\n    sendSystemErrorMessage(guild, error, errorMessage) {\r\n        const systemChannel = guild.channels.cache.get(this.errorLog);\r\n\r\n        // Check channel and permissions\r\n        if (\r\n            !systemChannel ||\r\n            !systemChannel.viewable ||\r\n            !systemChannel\r\n                .permissionsFor(guild.me)\r\n                .has(['SEND_MESSAGES', 'EMBED_LINKS'])\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const embed = new Discord.MessageEmbed()\r\n            .setAuthor(\r\n                `${this.user.tag}`,\r\n                this.user.displayAvatarURL({ dynamic: true })\r\n            )\r\n            .setTitle(`${fail} System Error: \\`${error}\\``)\r\n            .setDescription(\r\n                `\\`\\`\\`diff\\n- System Failure\\n+ ${errorMessage}\\`\\`\\``\r\n            )\r\n            .setTimestamp()\r\n            .setColor(guild.me.displayHexColor);\r\n        systemChannel.send(embed);\r\n    }\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/structures/Client.js b/structures/Client.js
--- a/structures/Client.js	(revision 61f79ad7a0a5c159c5fddb27dbfa9a01daee513a)
+++ b/structures/Client.js	(date 1616806391130)
@@ -27,7 +27,9 @@
     ['loyal', 'Loyalty Program Commands'],
     ['other', 'Other'],
 ];
+/*
 
+ */
 Discord.Structures.extend('Guild', function (Guild) {
     class MusicGuild extends Guild {
         constructor(client, data) {
